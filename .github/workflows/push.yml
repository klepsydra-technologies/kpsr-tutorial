# Copyright 2023 Klepsydra Technologies AG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Check builds

on:
  push:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  vanilla:
    strategy:
      fail-fast: false
      matrix:
        include:
          - buildtype: Debug
          - buildtype: Release
    name: Vanilla ${{ matrix.buildtype }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/klepsydra-technologies/kpsrbase:1.0.0
    steps:
      - name: Clone kpsr-core
        uses: actions/checkout@v3
        with:
          repository: klepsydra-technologies/kpsr-core
          ref: main
          submodules: recursive
          path: kpsr-core

      - name: Build and install kpsr-core
        run: |
          mkdir build && cd build
          cmake -DKPSR_WITH_DOXYGEN=true -DKPSR_WITH_DDS=false -DKPSR_WITH_ZMQ=false -DKPSR_TEST_PERFORMANCE=true -DKPSR_WITH_SOCKET=true -DKPSR_WITH_CODE_METRICS=true -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} ../
          make -j$(nproc)
          make install
        working-directory: kpsr-core

      - name: Clone project
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build project
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} ../
          make -j$(nproc)

      - name: Run tutorial unit tests
        timeout-minutes: 10
        run: |
          ./build/bin/kpsr_tutorial_tests

      - name: Run chapters
        timeout-minutes: 10
        run: |
          cd build
          for tutorial in $(ls bin | grep kpsr_tutorial_chapter);do echo "$tutorial";bin/$tutorial;done

      - name: Run examples
        timeout-minutes: 10
        run: |
          cd build
          for tutorial in $(ls bin | grep kpsr_tutorial_example);do echo "$tutorial";bin/$tutorial;done

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: vanilla-debug-logs
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/Testing/Temporary

  ros:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rosrelease: ["noetic"]
    name: ROS ${{ matrix.rosrelease }}
    env:
      ROS_DISTRO: ${{ matrix.rosrelease }}
    container:
      image: "ghcr.io/klepsydra-technologies/kpsr${{ matrix.rosrelease }}:1.0.0"
    steps:
      - name: Clone kpsr-core
        uses: actions/checkout@v3
        with:
          repository: klepsydra-technologies/kpsr-core
          submodules: recursive
          ref: main
          path: kpsr-core

      - name: Install kpsr-core
        run: |
          mkdir -p build && cd build
          cmake -DKPSR_WITH_DOXYGEN=false -DKPSR_WITH_DDS=false -DKPSR_WITH_ZMQ=false -DKPSR_TEST_PERFORMANCE=false -DKPSR_WITH_SOCKET=true -DKPSR_WITH_CODE_METRICS=false -DCMAKE_BUILD_TYPE=Release ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpsr-core

      - name: Clone project
        uses: actions/checkout@v3
        with:
          submodules: recursive
          path: kpsr-tutorial

      - name: Install project
        run: |
          mkdir build && cd build

          cmake -DCMAKE_BUILD_TYPE=Release ../
          make -j$(nproc)
          sudo make -j$(nproc) install
        working-directory: kpsr-tutorial

      - name: Create ROS environment
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          mkdir -p ${GITHUB_WORKSPACE}/kpsr-ros/src/build
          cd ${GITHUB_WORKSPACE}/kpsr-ros/src
          catkin_init_workspace
          ln -s ${GITHUB_WORKSPACE}/kpsr-core/core/modules/ros_mdlw/kpsr_ros_core .
          ln -s ${GITHUB_WORKSPACE}/kpsr-core/serialization/modules/ros_mdlw/kpsr_ros_serialization .
          ln -s ${GITHUB_WORKSPACE}/kpsr-tutorial/examples/chapter1 .
          ln -s ${GITHUB_WORKSPACE}/kpsr-tutorial/examples/chapter2 .
          ls -la ${GITHUB_WORKSPACE}

      - name: Build ros
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          cd ${GITHUB_WORKSPACE}/kpsr-ros/src/build
          cmake ../
          make -j$(nproc)
          make -j$(nproc) tests

      - name: Run tests
        timeout-minutes: 15
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          cd ${GITHUB_WORKSPACE}/kpsr-ros/src/build
          roscore &
          sleep 2
          make test

      - name: Upload logs on failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ros-${{ matrix.rosrelease }}
          path: |
            build/Testing/Temporary
            build/code_generator/kpsr_codegen/build_cpptesting/Testing/Temporary
            ${GITHUB_WORKSPACE}/kpsr-ros/src/build/Testing/Temporary
            ${GITHUB_WORKSPACE}/kpsr-ros/src/build/test_results
